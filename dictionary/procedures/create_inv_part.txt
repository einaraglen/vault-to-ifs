PROCEDURE Create_Inventory_Part(rec_ IFSAPP.in_message_line%ROWTYPE) IS
      cnt_        NUMBER := 0;
      info_       VARCHAR2(2000);
      attr_       VARCHAR2(2000);
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
      weight_net_ NUMBER := 0;
   
      CURSOR check_inventory_part(part_ IN VARCHAR2, contr_ IN VARCHAR2) IS
         SELECT COUNT(1)
         FROM   IFSAPP.inventory_part
         WHERE  part_no = part_
         AND    contract = contr_;
   
      CURSOR invpart_get_version(part_ IN VARCHAR2) IS
         SELECT objid, objversion
         FROM   IFSAPP.INVENTORY_PART
         WHERE  contract = contract_
         AND    part_no = part_;
   
      CURSOR invpart_get_rev(part_ IN VARCHAR2) IS
         SELECT objid, objversion
         FROM   ifsapp.part_revision
         WHERE  contract = contract_
         AND    part_no = part_
         AND    eng_chg_level = 1;
   
   BEGIN
      OPEN check_inventory_part(Prefix_Part_No__(rec_.c01), contract_);
      FETCH check_inventory_part
         INTO cnt_;
      CLOSE check_inventory_part;
   
      DECLARE
         mass_g_ VARCHAR2(200) := rec_.c25;
         test_   NUMBER := 0;
         ok_     BOOLEAN := FALSE;
      BEGIN
         BEGIN
            test_ := TO_NUMBER(mass_g_);
            ok_   := TRUE;
         EXCEPTION
            WHEN OTHERS THEN
               ok_ := FALSE;
         END;
         IF NOT (ok_) THEN
            BEGIN
               test_ := TO_NUMBER(REPLACE(mass_g_, ',', '.'));
               ok_   := TRUE;
            EXCEPTION
               WHEN OTHERS THEN
                  ok_ := FALSE;
            END;
         END IF;
         IF NOT (ok_) THEN
            BEGIN
               test_ := TO_NUMBER(REPLACE(mass_g_, '.', ','));
               ok_   := TRUE;
            EXCEPTION
               WHEN OTHERS THEN
                  ok_ := FALSE;
            END;
         END IF;
         IF test_ > 0 THEN
            weight_net_ := test_ / 1000;
         END IF;
      END;
   
      IF (cnt_ = 0) THEN
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         IF rec_.C18 = 'Obsolete' THEN
            IFSAPP.Client_SYS.Add_To_Attr('PART_STATUS', 'I', attr_);
         ELSE
            IFSAPP.Client_SYS.Add_To_Attr('PART_STATUS', 'A', attr_);
         END IF;
         IFSAPP.Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('ASSET_CLASS', 'S', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('STOCK_MANAGEMENT_DB', 'SYSTEM MANAGED INVENTORY', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DOP_CONNECTION',
                                       IFSAPP.Dop_Connection_API.Decode('MAN'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DOP_NETTING',
                                       IFSAPP.Dop_Netting_API.Decode('NETT'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PLANNER_BUYER', '*', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CYCLE_PERIOD', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CYCLE_CODE_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('MANUF_LEADTIME', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PURCH_LEADTIME', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('EXPECTED_LEADTIME', 0, attr_);
         --IFSAPP.Client_SYS.Add_To_Attr('WEIGHT_NET', weight_net_, attr_);
         Set_Weight_Net( Prefix_Part_No__(rec_.c01), weight_net_ );
         IFSAPP.Client_SYS.Add_To_Attr('SUPPLY_CODE',
                                       IFSAPP.Material_Requis_Supply_API.Decode('IO'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('TYPE_CODE',
                                       IFSAPP.Inventory_Part_Type_API.Decode('4'),
                                       attr_);
         IF SUBSTR(rec_.c01, 1, 2) = '20' THEN
            IFSAPP.Client_SYS.Add_To_Attr('ZERO_COST_FLAG',
                                          IFSAPP.Inventory_Part_Zero_Cost_API.Decode('O'),
                                          attr_);
         ELSE
            IFSAPP.Client_SYS.Add_To_Attr('ZERO_COST_FLAG',
                                          IFSAPP.Inventory_Part_Zero_Cost_API.Decode('N'),
                                          attr_);
         END IF;
         IFSAPP.Client_SYS.Add_To_Attr('LEAD_TIME_CODE',
                                       IFSAPP.Inv_Part_Lead_Time_Code_API.Decode('P'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('AVAIL_ACTIVITY_STATUS',
                                       IFSAPP.Inventory_Part_Avail_Stat_API.Decode('CHANGED'),
                                       attr_);
         IF rec_.c10 = '3.1' THEN
            IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_COORDINATOR_ID', 'MATCERT31', attr_);
         ELSIF rec_.c10 = '3.2' THEN
            IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_COORDINATOR_ID', 'MATCERT31', attr_);
         END IF;
         IFSAPP.Client_SYS.Add_To_Attr('ESTIMATED_MATERIAL_COST', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PART_NO', Prefix_Part_No__(rec_.c01), attr_);
         IFSAPP.Client_SYS.Add_To_Attr('UNIT_MEAS', rec_.C03, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION',
                                       NVL(rec_.c07,
                                           'Description does not exist in Vault for article ' ||
                                           Prefix_Part_No__(rec_.c01)),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('OE_ALLOC_ASSIGN_FLAG_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('ONHAND_ANALYSIS_FLAG_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('SHORTAGE_FLAG_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('FORECAST_CONSUMPTION_FLAG_DB', 'NOFORECAST', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('STOCK_MANAGEMENT_DB', 'SYSTEM MANAGED INVENTORY', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('INVENTORY_VALUATION_METHOD_DB', 'ST', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('NEGATIVE_ON_HAND_DB', 'NEG ONHAND OK', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('INVOICE_CONSIDERATION_DB', 'IGNORE INVOICE PRICE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('INVENTORY_PART_COST_LEVEL_DB', 'COST PER PART', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('EXT_SERVICE_COST_METHOD_DB',
                                       'EXCLUDE SERVICE COST',
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('AUTOMATIC_CAPABILITY_CHECK_DB',
                                       'NO AUTOMATIC CAPABILITY CHECK',
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CO_RESERVE_ONH_ANALYS_FLAG_DB', 'N', attr_);
         IF (NVL(rec_.C17, 'N') = 'Y') THEN
            IFSAPP.Client_SYS.Add_To_Attr('QTY_CALC_ROUNDING', 0, attr_);
         ELSE
            IFSAPP.Client_SYS.Add_To_Attr('QTY_CALC_ROUNDING', 16, attr_);
         END IF;
         IFSAPP.Client_SYS.Set_Item_Value('CONTRACT', contract_, attr_);
         IFSAPP.INVENTORY_PART_API.New__(info_, objid_, objversion_, attr_, 'DO');
         /*IFSAPP.Inventory_Part_Planning_API.Modify_Planning_Attributes(contract_, Prefix_Part_No__(rec_.c01), null, null, null, 
                                                   1, 
                                                   null, null, null, null, null, null, null, null, null, null, null, null, null,
                                                   'B'); */
         attr_ := NULL;
         OPEN invpart_get_rev(Prefix_Part_No__(rec_.c01));
         FETCH invpart_get_rev
            INTO objid_, objversion_;
         CLOSE invpart_get_rev;
         IFSAPP.Client_SYS.Add_To_Attr('EFF_PHASE_IN_DATE', SYSDATE - 6 * 30, attr_);
         IFSAPP.Part_Revision_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
      ELSE
         OPEN invpart_get_version(Prefix_Part_No__(rec_.c01));
         FETCH invpart_get_version
            INTO objid_, objversion_;
         CLOSE invpart_get_version;
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         /*IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION', NVL(rec_.c07, 'Description does not exist in Vault for article ' ||  Prefix_Part_No__(rec_.c01) ),  attr_);*/
         --IFSAPP.Client_SYS.Add_To_Attr('WEIGHT_NET', weight_net_, attr_);
         Set_Weight_Net( Prefix_Part_No__(rec_.c01), weight_net_ );
         IF rec_.c10 = '3.1' THEN
            IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_COORDINATOR_ID', 'MATCERT31', attr_);
         ELSIF rec_.c10 = '3.2' THEN
            IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_COORDINATOR_ID', 'MATCERT31', attr_);
         END IF;
         IFSAPP.INVENTORY_PART_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
      END IF;
   END Create_Inventory_Part;