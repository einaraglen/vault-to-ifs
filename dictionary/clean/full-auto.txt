DECLARE
   CURSOR get_in_message IS
      SELECT *
      FROM   IFSAPP.in_message
      WHERE  class_id = 'SE_PART_INFO'
      AND    objstate IN ('Posted', 'Transferred');

   CURSOR get_line(message_id_ IN NUMBER) IS
      SELECT *
      FROM   IFSAPP.in_message_line l
      WHERE  message_id = message_id_
      AND    l.message_line = 1;

   contract_      VARCHAR2(20) := 'SE';
   line_rec_      IFSAPP.in_message_line%ROWTYPE;
   error_message_ VARCHAR2(32000);
   step_          NUMBER;
   attr_          VARCHAR2(2000);
   info_          VARCHAR2(2000);
   ok_            NUMBER;
   new_revision_  VARCHAR2(200);

   FUNCTION Prefix_Part_No__(part_no_ IN VARCHAR2) RETURN VARCHAR2 IS
      prefixed_part_no_ VARCHAR2(100);
      prefix_           VARCHAR2(5) := 'SE';
   BEGIN
      IF ((part_no_ IS NULL) OR (SUBSTR(part_no_, 1, LENGTH(prefix_)) = prefix_) OR
         ((LENGTH(part_no_) = 7) AND (SUBSTR(part_no_, 1, 1) != '2')) OR (LENGTH(part_no_) != 7)) THEN
         prefixed_part_no_ := part_no_;
      ELSE
         prefixed_part_no_ := prefix_ || part_no_;
      END IF;
      RETURN(prefixed_part_no_);
   END Prefix_Part_No__;

   PROCEDURE Add_Tech_Spec(rec_ IFSAPP.in_message_line%ROWTYPE) IS
   
      CURSOR get_tech_spec_attr(technical_spec_no_ IN NUMBER) IS
         SELECT OBJID,
                OBJVERSION,
                TECHNICAL_SPEC_NO,
                TECHNICAL_CLASS,
                ATTRIB_NUMBER,
                ATTRIBUTE,
                VALUE_TEXT,
                INFO
         FROM   ifsapp.TECHNICAL_SPEC_ALPHANUM
         WHERE  TECHNICAL_CLASS = 'SEPARTINFO'
         AND    TECHNICAL_SPEC_NO = technical_spec_no_
         ORDER  BY ATTRIB_NUMBER;
   
      technical_spec_no_ NUMBER;
      attr_              VARCHAR2(32000);
      info_              VARCHAR2(32000);
      objid_             VARCHAR2(32000);
      objversion_        VARCHAR2(32000);
   
   BEGIN
      technical_spec_no_ := ifsapp.TECHNICAL_OBJECT_REFERENCE_API.Get_Technical_Spec_No('PartCatalog',
                                                                                        'PART_NO=' ||
                                                                                        Prefix_Part_No__(rec_.c01) || '^');
      IF technical_spec_no_ = -1 THEN
         attr_ := NULL;
         IFSAPP.Client_SYS.Add_To_Attr('LU_NAME', 'PartCatalog', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('KEY_REF',
                                       'PART_NO=' || Prefix_Part_No__(rec_.c01) || '^',
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_SPEC_NO', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_CLASS', 'SEPARTINFO', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('OK_YES_NO',
                                       IFSAPP.Technical_Obj_Ref_Approved_API.Decode('1'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('OK_SIGN', 'IFSAPP', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DT_OK', TRUNC(SYSDATE), attr_);
         IFSAPP.TECHNICAL_OBJECT_REFERENCE_API.NEW__(info_, objid_, objversion_, attr_, 'DO');
         technical_spec_no_ := IFSAPP.Client_SYS.Get_Item_Value('TECHNICAL_SPEC_NO', attr_);
      END IF;
      FOR r_ IN get_tech_spec_attr(technical_spec_no_) LOOP
         attr_ := NULL;
         IF r_.attribute = 'SE_INTDESC' THEN
            IFSAPP.Client_SYS.Add_To_Attr('INFO', SUBSTR(rec_.c09, 1, 2000), attr_);
         ELSIF r_.attribute = 'SE_CAT1' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c11, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_CAT2' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c12, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_CAT3' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c13, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_CAT4' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c14, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_CRITIC_ITEM' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c20, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_LLI' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c21, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_MATCERT' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c10, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_MATERIAL' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c23, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_PROJECT' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c24, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_SERIAL_NO' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c17, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_SPARE_PART' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c15, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_SUPP_PARTNO' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c22, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_VENDOR_NAME' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c16, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_CREATED_BY' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(rec_.c31, 1, 20), attr_);
         ELSIF r_.attribute = 'SE_CREATED_DATE' THEN
            IFSAPP.Client_SYS.Add_To_Attr('VALUE_TEXT', SUBSTR(to_char(to_date(rec_.c32, 'yyyy-mm-dd hh24:mi:ss"Z"'), 'yyyy-mm-dd'), 1, 20), attr_);
         END IF;
         IF attr_ IS NOT NULL AND NOT IFSAPP.TECHNICAL_OBJECT_REFERENCE_API.Check_Approved(technical_spec_no_) THEN
            IFSAPP.TECHNICAL_SPEC_ALPHANUM_API.Modify__(info_,
                                                        r_.objid,
                                                        r_.objversion,
                                                        attr_,
                                                        'DO');
         END IF;
      END LOOP;
   END Add_Tech_Spec;

   PROCEDURE Create_Part_Catalog(rec_ IFSAPP.in_message_line%ROWTYPE) IS
   
      cnt_ NUMBER := 0;
   
      info_       VARCHAR2(2000);
      attr_       VARCHAR2(2000);
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
   
      CURSOR check_part_catalog(part_ IN VARCHAR2) IS
         SELECT COUNT(1) FROM IFSAPP.part_catalog WHERE part_no = part_;
   
      CURSOR partca_get_version(part_ IN VARCHAR2) IS
         SELECT objid, objversion FROM IFSAPP.part_catalog WHERE part_no = part_;
   
   BEGIN
      OPEN check_part_catalog(Prefix_Part_No__(rec_.c01));
      FETCH check_part_catalog
         INTO cnt_;
      CLOSE check_part_catalog;
   
      IF (cnt_ = 0) THEN
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         IFSAPP.PART_CATALOG_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
         IFSAPP.Client_SYS.Add_To_Attr('PART_NO', Prefix_Part_No__(rec_.c01), attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION',
                                       NVL(rec_.c07,
                                           'Description does not exist in Vault for article ' ||
                                           Prefix_Part_No__(rec_.c01)),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('UNIT_CODE', rec_.C03, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('STD_NAME_ID', '0', attr_);
         IFSAPP.PART_CATALOG_API.New__(info_, objid_, objversion_, attr_, 'DO');
      ELSE
         OPEN partca_get_version(Prefix_Part_No__(rec_.c01));
         FETCH partca_get_version
            INTO objid_, objversion_;
         CLOSE partca_get_version;
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION',
                                       NVL(rec_.C07,
                                           'Description does not exist in Vault for article ' ||
                                           Prefix_Part_No__(rec_.c01)),
                                       attr_);
         IFSAPP.PART_CATALOG_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
      END IF;
      Add_Tech_Spec(rec_);
   END Create_Part_Catalog;

   PROCEDURE Create_Eng_Part(new_revision_ IN OUT VARCHAR2, rec_ IFSAPP.in_message_line%ROWTYPE) IS
      cnt_        NUMBER := 0;
      info_       VARCHAR2(2000);
      attr_       VARCHAR2(2000);
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
   
      current_part_rev_ VARCHAR2(20);
      part_no_          VARCHAR2(100);
   
      CURSOR check_eng_part_master(part_ IN VARCHAR2) IS
         SELECT COUNT(1) FROM ifsapp.eng_part_master WHERE part_no = part_;
   
      CURSOR get_eng_part_revision(p_part_no_ IN VARCHAR2, p_part_rev_ IN VARCHAR2) IS
         SELECT *
         FROM   IFSAPP.eng_part_revision
         WHERE  part_no = p_part_no_
         AND    part_rev = p_part_rev_;
   
      CURSOR get_latest_revision(p_part_no_ IN VARCHAR2, p_part_rev_ IN VARCHAR2) IS
         SELECT *
         FROM   IFSAPP.eng_part_revision
         WHERE  part_no = p_part_no_
         AND    substr(part_rev, 1, 1) = SUBSTR(p_part_rev_, 1, 1)
         ORDER  BY part_rev DESC;
   
      eng_part_revision_rec_ get_eng_part_revision%ROWTYPE;
   
      CURSOR part_master_get_version(part_ IN VARCHAR2) IS
         SELECT objid, objversion FROM IFSAPP.eng_part_master WHERE part_no = part_;
   
      new_rev_ VARCHAR2(200);
   
      FUNCTION Get_New_Revision__(current_revision_ IN VARCHAR2) RETURN VARCHAR2 IS
      BEGIN
         RETURN substr(current_revision_, 1, 1) || lpad(substr(rpad(current_revision_, 3, '0'),
                                                               -2) + 1,
                                                        2,
                                                        '0');
      END Get_New_Revision__;
   
   BEGIN
      -- eng_part_master
      part_no_ := Prefix_Part_No__(rec_.c01);
      OPEN check_eng_part_master(Prefix_Part_No__(rec_.c01));
      FETCH check_eng_part_master
         INTO cnt_;
      CLOSE check_eng_part_master;
   
      IF (cnt_ = 0) THEN
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         IFSAPP.ENG_PART_MASTER_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
         IFSAPP.Client_SYS.Add_To_Attr('PART_NO', Prefix_Part_No__(rec_.c01), attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION',
                                       NVL(rec_.c07,
                                           'Description does not exist in Vault for article ' ||
                                           Prefix_Part_No__(rec_.c01)),
                                       attr_);
         IFSAPP.Client_SYS.Set_Item_Value('UNIT_CODE',
                                       IFSAPP.Part_Catalog_API.Get(Prefix_Part_No__(rec_.c01)).unit_code,
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('STD_NAME_ID', '0', attr_);
         IF (rec_.c02 IS NOT NULL) THEN
            IFSAPP.Client_SYS.Set_Item_Value('FIRST_REVISION', rec_.c02, attr_);
         END IF;
      
         IF (NVL(rec_.C17, 'N') = 'Y') THEN
            IFSAPP.Client_SYS.Add_To_Attr('SERIAL_TRACKING_CODE',
                                          IFSAPP.Part_Serial_Tracking_API.Decode('SERIAL TRACKING'),
                                          attr_);
            IFSAPP.Client_SYS.Add_To_Attr('SERIAL_TYPE',
                                          IFSAPP.Part_Serial_Tracking_API.Decode('SERIAL TRACKING'),
                                          attr_);
         END IF;
         IFSAPP.ENG_PART_MASTER_API.New__(info_, objid_, objversion_, attr_, 'DO');
         IF rec_.C18 = 'Released' THEN
            UPDATE IFSAPP.Eng_Part_Revision_TAB
            SET    ROWSTATE = 'Active'
            WHERE  part_no = part_no_
            AND    part_rev = rec_.c02;
         END IF;
         new_revision_ := rec_.c02;
      ELSE
         OPEN get_latest_revision(Prefix_Part_No__(rec_.c01), rec_.c02);
         FETCH get_latest_revision
            INTO eng_part_revision_rec_;
         current_part_rev_ := eng_part_revision_rec_.PART_REV;
         IF get_latest_revision%FOUND AND SUBSTR(rec_.c01, 1, 2) NOT LIKE '16' THEN
            /* Use last revision to calculate next revision */
            new_rev_      := Get_New_Revision__(current_part_rev_);
            new_revision_ := new_rev_;
         ELSIF get_latest_revision%FOUND AND SUBSTR(rec_.c01, 1, 2) LIKE '16' THEN
            /* Parts start with 16 and this revision exists. Do not create a new... */
            IF current_part_rev_ != rec_.c02 THEN
               new_rev_      := NULL;
               new_revision_ := current_part_rev_;
            ELSE
               new_rev_      := NULL;
               new_revision_ := rec_.c02;
            END IF;
         
         ELSE
            /* This is the first revision for this letter */
            new_rev_      := rec_.c02;
            new_revision_ := new_rev_;
            IF current_part_rev_ IS NULL THEN
               current_part_rev_ := IFSAPP.Eng_Part_Revision_API.Get_Last_Rev(Prefix_Part_No__(rec_.c01));
            END IF;
         END IF;
         CLOSE get_latest_revision;
         IF new_rev_ IS NOT NULL THEN
            IFSAPP.Eng_Part_Revision_API.New_Revision_(Prefix_Part_No__(rec_.c01),
                                                       new_rev_,
                                                       current_part_rev_,
                                                       NULL,
                                                       NULL);
            IF rec_.C18 = 'Released' THEN
               UPDATE IFSAPP.Eng_Part_Revision_TAB
               SET    ROWSTATE = 'Active'
               WHERE  part_no = part_no_
               AND    part_rev = new_rev_;
               UPDATE IFSAPP.Eng_Part_Revision_TAB
               SET    ROWSTATE = 'Active'
               WHERE  part_no = part_no_
               AND    part_rev = new_revision_;
            END IF;
         ELSIF rec_.C18 = 'Obsolete' THEN
            UPDATE IFSAPP.Eng_Part_Revision_TAB
            SET    ROWSTATE = 'Obsolete'
            WHERE  part_no = part_no_
            AND    part_rev = new_rev_;
            UPDATE IFSAPP.Eng_Part_Revision_TAB
            SET    ROWSTATE = 'Obsolete'
            WHERE  part_no = part_no_
            AND    part_rev = new_revision_;
         END IF;
         IF rec_.C18 = 'Released' THEN
            UPDATE IFSAPP.Eng_Part_Revision_TAB
            SET    ROWSTATE = 'Active'
            WHERE  part_no = part_no_
            AND    part_rev = new_revision_;
            UPDATE IFSAPP.Eng_Part_Revision_TAB
            SET    ROWSTATE = 'Active'
            WHERE  part_no = part_no_
            AND    part_rev = new_rev_;
         ELSIF rec_.C18 = 'Obsolete' THEN
            UPDATE IFSAPP.Eng_Part_Revision_TAB
            SET    ROWSTATE = 'Obsolete'
            WHERE  part_no = part_no_
            AND    part_rev = new_rev_;
            UPDATE IFSAPP.Eng_Part_Revision_TAB
            SET    ROWSTATE = 'Obsolete'
            WHERE  part_no = part_no_
            AND    part_rev = new_revision_;
         END IF;
      END IF;
   END Create_Eng_Part;

  PROCEDURE Set_Weight_Net( part_no_ IN VARCHAR2, weight_net_ IN NUMBER )  IS
      attr_       VARCHAR2(2000);
      info_       VARCHAR2(2000);
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
      uom_for_weight_net_  VARCHAR2(50);

       CURSOR get_part IS
       SELECT objid, objversion, uom_for_weight_net
         FROM ifsapp.part_catalog p
        WHERE part_no = part_no_;   
   BEGIN 
       OPEN get_part;
       FETCH get_part INTO objid_, objversion_, uom_for_weight_net_;
       CLOSE get_part;
       
       ifsapp.Client_SYS.Add_To_Attr('WEIGHT_NET', weight_net_, attr_);
       IF uom_for_weight_net_ IS NULL THEN 
          ifsapp.Client_SYS.Add_To_Attr('UOM_FOR_WEIGHT_NET', 'kg', attr_);
       END IF;
       IFSAPP.Part_Catalog_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
   END;


   PROCEDURE Create_Inventory_Part(rec_ IFSAPP.in_message_line%ROWTYPE) IS
      cnt_        NUMBER := 0;
      info_       VARCHAR2(2000);
      attr_       VARCHAR2(2000);
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
      weight_net_ NUMBER := 0;
   
      CURSOR check_inventory_part(part_ IN VARCHAR2, contr_ IN VARCHAR2) IS
         SELECT COUNT(1)
         FROM   IFSAPP.inventory_part
         WHERE  part_no = part_
         AND    contract = contr_;
   
      CURSOR invpart_get_version(part_ IN VARCHAR2) IS
         SELECT objid, objversion
         FROM   IFSAPP.INVENTORY_PART
         WHERE  contract = contract_
         AND    part_no = part_;
   
      CURSOR invpart_get_rev(part_ IN VARCHAR2) IS
         SELECT objid, objversion
         FROM   ifsapp.part_revision
         WHERE  contract = contract_
         AND    part_no = part_
         AND    eng_chg_level = 1;
   
   BEGIN
      OPEN check_inventory_part(Prefix_Part_No__(rec_.c01), contract_);
      FETCH check_inventory_part
         INTO cnt_;
      CLOSE check_inventory_part;
   
      DECLARE
         mass_g_ VARCHAR2(200) := rec_.c25;
         test_   NUMBER := 0;
         ok_     BOOLEAN := FALSE;
      BEGIN
         BEGIN
            test_ := TO_NUMBER(mass_g_);
            ok_   := TRUE;
         EXCEPTION
            WHEN OTHERS THEN
               ok_ := FALSE;
         END;
         IF NOT (ok_) THEN
            BEGIN
               test_ := TO_NUMBER(REPLACE(mass_g_, ',', '.'));
               ok_   := TRUE;
            EXCEPTION
               WHEN OTHERS THEN
                  ok_ := FALSE;
            END;
         END IF;
         IF NOT (ok_) THEN
            BEGIN
               test_ := TO_NUMBER(REPLACE(mass_g_, '.', ','));
               ok_   := TRUE;
            EXCEPTION
               WHEN OTHERS THEN
                  ok_ := FALSE;
            END;
         END IF;
         IF test_ > 0 THEN
            weight_net_ := test_ / 1000;
         END IF;
      END;
   
      IF (cnt_ = 0) THEN
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         IF rec_.C18 = 'Obsolete' THEN
            IFSAPP.Client_SYS.Add_To_Attr('PART_STATUS', 'I', attr_);
         ELSE
            IFSAPP.Client_SYS.Add_To_Attr('PART_STATUS', 'A', attr_);
         END IF;
         IFSAPP.Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('ASSET_CLASS', 'S', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('STOCK_MANAGEMENT_DB', 'SYSTEM MANAGED INVENTORY', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DOP_CONNECTION',
                                       IFSAPP.Dop_Connection_API.Decode('MAN'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DOP_NETTING',
                                       IFSAPP.Dop_Netting_API.Decode('NETT'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PLANNER_BUYER', '*', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CYCLE_PERIOD', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CYCLE_CODE_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('MANUF_LEADTIME', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PURCH_LEADTIME', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('EXPECTED_LEADTIME', 0, attr_);
         --IFSAPP.Client_SYS.Add_To_Attr('WEIGHT_NET', weight_net_, attr_);
         Set_Weight_Net( Prefix_Part_No__(rec_.c01), weight_net_ );
         IFSAPP.Client_SYS.Add_To_Attr('SUPPLY_CODE',
                                       IFSAPP.Material_Requis_Supply_API.Decode('IO'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('TYPE_CODE',
                                       IFSAPP.Inventory_Part_Type_API.Decode('4'),
                                       attr_);
         IF SUBSTR(rec_.c01, 1, 2) = '20' THEN
            IFSAPP.Client_SYS.Add_To_Attr('ZERO_COST_FLAG',
                                          IFSAPP.Inventory_Part_Zero_Cost_API.Decode('O'),
                                          attr_);
         ELSE
            IFSAPP.Client_SYS.Add_To_Attr('ZERO_COST_FLAG',
                                          IFSAPP.Inventory_Part_Zero_Cost_API.Decode('N'),
                                          attr_);
         END IF;
         IFSAPP.Client_SYS.Add_To_Attr('LEAD_TIME_CODE',
                                       IFSAPP.Inv_Part_Lead_Time_Code_API.Decode('P'),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('AVAIL_ACTIVITY_STATUS',
                                       IFSAPP.Inventory_Part_Avail_Stat_API.Decode('CHANGED'),
                                       attr_);
         IF rec_.c10 = '3.1' THEN
            IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_COORDINATOR_ID', 'MATCERT31', attr_);
         ELSIF rec_.c10 = '3.2' THEN
            IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_COORDINATOR_ID', 'MATCERT31', attr_);
         END IF;
         IFSAPP.Client_SYS.Add_To_Attr('ESTIMATED_MATERIAL_COST', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PART_NO', Prefix_Part_No__(rec_.c01), attr_);
         IFSAPP.Client_SYS.Add_To_Attr('UNIT_MEAS', rec_.C03, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION',
                                       NVL(rec_.c07,
                                           'Description does not exist in Vault for article ' ||
                                           Prefix_Part_No__(rec_.c01)),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('OE_ALLOC_ASSIGN_FLAG_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('ONHAND_ANALYSIS_FLAG_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('SHORTAGE_FLAG_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('FORECAST_CONSUMPTION_FLAG_DB', 'NOFORECAST', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('STOCK_MANAGEMENT_DB', 'SYSTEM MANAGED INVENTORY', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('INVENTORY_VALUATION_METHOD_DB', 'ST', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('NEGATIVE_ON_HAND_DB', 'NEG ONHAND OK', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('INVOICE_CONSIDERATION_DB', 'IGNORE INVOICE PRICE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('INVENTORY_PART_COST_LEVEL_DB', 'COST PER PART', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('EXT_SERVICE_COST_METHOD_DB',
                                       'EXCLUDE SERVICE COST',
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('AUTOMATIC_CAPABILITY_CHECK_DB',
                                       'NO AUTOMATIC CAPABILITY CHECK',
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CO_RESERVE_ONH_ANALYS_FLAG_DB', 'N', attr_);
         IF (NVL(rec_.C17, 'N') = 'Y') THEN
            IFSAPP.Client_SYS.Add_To_Attr('QTY_CALC_ROUNDING', 0, attr_);
         ELSE
            IFSAPP.Client_SYS.Add_To_Attr('QTY_CALC_ROUNDING', 16, attr_);
         END IF;
         IFSAPP.Client_SYS.Set_Item_Value('CONTRACT', contract_, attr_);
         IFSAPP.INVENTORY_PART_API.New__(info_, objid_, objversion_, attr_, 'DO');
         /*IFSAPP.Inventory_Part_Planning_API.Modify_Planning_Attributes(contract_, Prefix_Part_No__(rec_.c01), null, null, null, 
                                                   1, 
                                                   null, null, null, null, null, null, null, null, null, null, null, null, null,
                                                   'B'); */
         attr_ := NULL;
         OPEN invpart_get_rev(Prefix_Part_No__(rec_.c01));
         FETCH invpart_get_rev
            INTO objid_, objversion_;
         CLOSE invpart_get_rev;
         IFSAPP.Client_SYS.Add_To_Attr('EFF_PHASE_IN_DATE', SYSDATE - 6 * 30, attr_);
         IFSAPP.Part_Revision_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
      ELSE
         OPEN invpart_get_version(Prefix_Part_No__(rec_.c01));
         FETCH invpart_get_version
            INTO objid_, objversion_;
         CLOSE invpart_get_version;
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         /*IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION', NVL(rec_.c07, 'Description does not exist in Vault for article ' ||  Prefix_Part_No__(rec_.c01) ),  attr_);*/
         --IFSAPP.Client_SYS.Add_To_Attr('WEIGHT_NET', weight_net_, attr_);
         Set_Weight_Net( Prefix_Part_No__(rec_.c01), weight_net_ );
         IF rec_.c10 = '3.1' THEN
            IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_COORDINATOR_ID', 'MATCERT31', attr_);
         ELSIF rec_.c10 = '3.2' THEN
            IFSAPP.Client_SYS.Add_To_Attr('TECHNICAL_COORDINATOR_ID', 'MATCERT31', attr_);
         END IF;
         IFSAPP.INVENTORY_PART_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
      END IF;
   END Create_Inventory_Part;

   PROCEDURE Create_Purchase_Part(rec_ IFSAPP.in_message_line%ROWTYPE) IS
      cnt_        NUMBER := 0;
      info_       VARCHAR2(2000);
      attr_       VARCHAR2(2000);
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
   
      CURSOR check_purchase_part(part_ IN VARCHAR2, contr_ IN VARCHAR2) IS
         SELECT COUNT(1)
         FROM   IFSAPP.purchase_part
         WHERE  part_no = part_
         AND    contract = contr_;
   
      CURSOR pur_part_get_version(part_ IN VARCHAR2) IS
         SELECT objid, objversion
         FROM   IFSAPP.purchase_part
         WHERE  contract = contract_
         AND    part_no = part_;
   
   BEGIN
      OPEN check_purchase_part(Prefix_Part_No__(rec_.c01), contract_);
      FETCH check_purchase_part
         INTO cnt_;
      CLOSE check_purchase_part;
   
      IF (cnt_ = 0) THEN
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         IFSAPP.PURCHASE_PART_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
         IFSAPP.Client_SYS.Add_To_Attr('PART_NO', Prefix_Part_No__(rec_.c01), attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION',
                                       NVL(rec_.c07,
                                           'Description does not exist in Vault for article ' ||
                                           Prefix_Part_No__(rec_.c01)),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('INVENTORY_FLAG_DB', 'Y', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DEFAULT_BUY_UNIT_MEAS', rec_.C03, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('TAXABLE', 'False', attr_);
         IFSAPP.Client_SYS.Set_Item_Value('CONTRACT', contract_, attr_);
         IFSAPP.PURCHASE_PART_API.New__(info_, objid_, objversion_, attr_, 'DO');
      ELSE
         OPEN pur_part_get_version(Prefix_Part_No__(rec_.c01));
         FETCH pur_part_get_version
            INTO objid_, objversion_;
         CLOSE pur_part_get_version;
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         /*IFSAPP.Client_SYS.Add_To_Attr('DESCRIPTION', NVL(rec_.c07, 'Description does not exist in Vault for article ' ||  Prefix_Part_No__(rec_.c01) ),  attr_);*/
         IFSAPP.PURCHASE_PART_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
      END IF;
   END Create_Purchase_Part;

   PROCEDURE Create_Sales_Part(rec_ IFSAPP.in_message_line%ROWTYPE) IS
      cnt_        NUMBER := 0;
      info_       VARCHAR2(2000);
      attr_       VARCHAR2(2000);
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
   
      CURSOR check_sales_part(part_ IN VARCHAR2, contr_ IN VARCHAR2) IS
         SELECT COUNT(1)
         FROM   IFSAPP.sales_part
         WHERE  catalog_no = part_
         AND    contract = contr_;
   
      CURSOR sales_part_get_version(part_ IN VARCHAR2) IS
         SELECT objid, objversion
         FROM   IFSAPP.sales_part
         WHERE  contract = contract_
         AND    catalog_no = part_;
   
   BEGIN
      OPEN check_sales_part(Prefix_Part_No__(rec_.c01), contract_);
      FETCH check_sales_part
         INTO cnt_;
      CLOSE check_sales_part;
   
      IF (cnt_ = 0) THEN
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CONTRACT', 'SE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CATALOG_TYPE_DB', 'INV', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PRIMARY_CATALOG_DB', 'FALSE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('ACTIVEIND_DB', 'Y', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('BONUS_BASIS_FLAG_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('BONUS_VALUE_FLAG_DB', 'N', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CONV_FACTOR', 1, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', 1, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('DATE_ENTERED', SYSDATE, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('QUICK_REGISTERED_PART_DB', 'FALSE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('ALLOW_PARTIAL_PKG_DELIV_DB', 'TRUE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CATALOG_NO', Prefix_Part_No__(rec_.c01), attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PART_NO', Prefix_Part_No__(rec_.c01), attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CATALOG_DESC',
                                       NVL(rec_.c07,
                                           'Description does not exist in Vault for article ' ||
                                           Prefix_Part_No__(rec_.c01)),
                                       attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CATALOG_GROUP', 'SE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('SALES_PRICE_GROUP_ID', 'SE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('SALES_UNIT_MEAS', rec_.C03, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('ACTIVEIND_DB', 'Y', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CONV_FACTOR', 1, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('COST', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('LIST_PRICE', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', 1, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PRICE_UNIT_MEAS', rec_.C03, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('COMPANY', 'SE', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('TAXABLE_DB', 'Use sales tax', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('FEE_CODE', '1', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', 0, attr_);
         IFSAPP.Client_SYS.Add_To_Attr('PURCHASE_PART_NO', Prefix_Part_No__(rec_.c01), attr_);
         IFSAPP.Client_SYS.Add_To_Attr('NON_INV_PART_TYPE_DB', 'GOODS', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('SOURCING_OPTION_DB', 'INVENTORYORDER', attr_);
         IFSAPP.Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX', ifsapp.fnd_boolean_api.Decode('FALSE'), attr_);
         IFSAPP.SALES_PART_API.New__(info_, objid_, objversion_, attr_, 'DO');
      ELSE
         OPEN sales_part_get_version(Prefix_Part_No__(rec_.c01));
         FETCH sales_part_get_version
            INTO objid_, objversion_;
         CLOSE sales_part_get_version;
         IFSAPP.Client_SYS.Clear_Attr(attr_);
         IFSAPP.Client_SYS.Add_To_Attr('CATALOG_DESC',
                                       NVL(rec_.c07,
                                           'Description does not exist in Vault for article ' ||
                                           Prefix_Part_No__(rec_.c01)),
                                       attr_);
         IFSAPP.SALES_PART_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
      END IF;
   END Create_Sales_Part;

BEGIN
   FOR m_ IN get_in_message LOOP
      attr_ := NULL;
      IF m_.objstate = 'Posted' THEN
         IFSAPP.In_Message_API.Activate__(info_, m_.objid, m_.objversion, attr_, 'DO');
         IFSAPP.In_Message_API.Transfer__(info_, m_.objid, m_.objversion, attr_, 'DO');
         COMMIT;
      END IF;
      FOR r_ IN get_line(m_.message_id) LOOP
         BEGIN
         
            step_ := 0;
            Create_Part_Catalog(r_);
            step_         := 1;
            new_revision_ := NULL;
            Create_Eng_Part(new_revision_, r_);
            step_ := 2;
            Create_Inventory_Part(r_);
            step_ := 3;
            Create_Purchase_Part(r_);
            step_ := 4;
            Create_Sales_Part(r_);
            step_ := 5;
            attr_ := NULL;
            ifsapp.Client_SYS.Add_To_Attr('APPLICATION_MESSAGE_ID', new_revision_, attr_);
            IFSAPP.In_Message_API.Modify__(info_, m_.objid, m_.objversion, attr_, 'DO');
            IFSAPP.Connectivity_SYS.Accept_Message_Line(r_.message_id, r_.message_line);
            IFSAPP.Connectivity_Sys.Set_In_Message_State(r_.message_id);
            COMMIT;
            ok_ := 1;
         EXCEPTION
            WHEN OTHERS THEN
               error_message_ := SQLERRM;
               ROLLBACK;
               IFSAPP.Connectivity_SYS.Reject_Message_Line(r_.message_id,
                                                           r_.message_line,
                                                           error_message_);
               IFSAPP.Connectivity_Sys.Set_In_Message_State(r_.message_id);
               COMMIT;
               ok_ := 0;
         END;
      END LOOP;
   END LOOP;
END;